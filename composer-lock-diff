#!/usr/bin/env php
<?php

$opts = parseOpts();

$changes = array();
$data_from = load($opts['from'], $opts['path'], $opts['vcs'], '');
$data_to   = load($opts['to'],   $opts['path'], $opts['vcs'], 'composer.lock');

if (! $opts['only-dev']) {
    $changes['changes'] = diff('packages', $data_from, $data_to);
}

if (! $opts['only-prod']) {
    $changes['changes-dev'] = diff('packages-dev', $data_from, $data_to);
}

if ($opts['json']) {
    $json_opts = ($opts['pretty']) ? JSON_PRETTY_PRINT : 0;
    print json_encode($changes, $json_opts);
    return;
}

$table_opts = array(
    'no-links' => $opts['no-links'],
);

if ($opts['md']) {
    $table_opts = array_merge($table_opts, array(
        'capped' => false,
        'joint' => '|',
        'url_formatter' => 'urlFormatterMd',
    ));
}

$table_titles = array(
    'changes' => 'Production Changes',
    'changes-dev' => 'Dev Changes',
);

foreach($changes as $k => $diff) {
    print tableize($table_titles[$k], $diff, $table_opts);
}

function diff($key, $data_from, $data_to) {

    $pkgs = array();

    foreach($data_from->$key as $pkg) {
        $pkgs[$pkg->name] = array(version($pkg), 'REMOVED', '');
    }

    foreach($data_to->$key as $pkg) {
        if (! array_key_exists($pkg->name, $pkgs)) {
            $pkgs[$pkg->name] = array('NEW', version($pkg), '');
            continue;
        }

        if ($pkgs[$pkg->name][0] == version($pkg)) {
            unset($pkgs[$pkg->name]);
        } else {
            $pkgs[$pkg->name][1] = version($pkg);
            $pkgs[$pkg->name][2] = makeCompareUrl($pkg, $pkgs);
        }
    }

    return $pkgs;
}

function version($pkg)
{
    if((substr($pkg->version,0,4) == 'dev-' || '-dev' === substr($pkg->version, -4)) && isset($pkg->source->reference)) {
        $version = substr($pkg->source->reference,0,7) ?: '';
    } else {
        $version = (string) $pkg->version;
    }

    return $version;
}

function tableize($header, $data, $opts = array()) {
    if (empty($data)) return '';

    $opts = array_merge(array('capped' => true, 'joint' => '+'), $opts);

    if ($opts['no-links']) {
        array_walk($data, function(&$values) {
            unset($values[2]);
        });
    } else {
        if (array_key_exists('url_formatter', $opts)) {
            $formatter = $opts['url_formatter'];
            array_walk($data, function(&$values) use ($formatter) {
                $values[2] = call_user_func($formatter, $values[2], '...');
            });
        }
    }

    $titles = array($header, 'From', 'To');
    if (! $opts['no-links']) array_push($titles, 'Compare');

    $widths = array(maxLength(array_merge(array($header), array_keys($data))));

    $count = count(reset($data));
    for($i = 0; $i < $count; $i++) {
        $widths[] = max(strlen($titles[$i + 1]), maxLength(array_map(function($k) use ($data, $i) { return $data[$k][$i]; }, array_keys($data))));
    }

    if ($opts['capped']) {
        $lines[] = separatorLine($widths, $opts['joint']);
    }

    $lines[] = tabelizeLine($titles, $widths);
    $lines[] = separatorLine($widths, $opts['joint']);

    foreach($data as $key => $v) {
        $lines[] = tabelizeLine(array_merge(array($key), $v), $widths);
    }

    if ($opts['capped']) {
        $lines[] = separatorLine($widths, $opts['joint']);
    }

    return implode(PHP_EOL, array_filter($lines)) . PHP_EOL . PHP_EOL;
}

function separatorLine($widths, $joint) {
    return $joint . implode($joint, array_map(function($n) { return str_repeat('-', $n + 2); }, $widths)) . $joint;
}

function maxLength(array $array) {
    return max(array_map('strlen', $array));
}

function tabelizeLine($data, $widths) {
    $fields = array();
    $count = max(array(count($data), count($widths)));
    for($i = 0; $i < $count; $i++) {
        $value = ($i >= count($data)) ? '' : $data[$i];
        $width = ($i >= count($widths)) ? strlen($value) : $widths[$i];
        $fields[] = sprintf("%-{$width}s", $value);
    }
    return '| ' . implode(' | ', $fields) . ' |';
}

function urlFormatterMd($url, $text) {
    if (empty($url)) return '';
    return sprintf('[%s](%s)', $text, $url);
}

// $fileish is what the user actually requested.
// $default_fileish is what it should be if $fileish is empty
function load($fileish, $base_path, $force_vcs, $default_fileish) {
    $loaders = ($force_vcs || (empty($fileish) && empty($default_fileish))) ? array() : array('loadFile');

    $vcses = $force_vcs ? array($force_vcs) : getVcses();
    $errors = array();

    foreach($vcses as $vcs) {
        $detector = 'vcsDetect' . ucfirst($vcs);
        if($vcs != $force_vcs && function_exists($detector)) {
            list($available, $err) = call_user_func($detector, $fileish, $base_path, $default_fileish);
            if ($err) {
                $errors[] = $err;
                continue;
            }
            if (!$available) continue;
        }
        $loaders[] = 'vcsLoad' . ucfirst($vcs);
    }

    if (empty($loaders)) {
        error_log(implode("\n", $errors));
        if ($force_vcs) {
            error_log("Requested vcs '$force_vcs' not installed or otherwise unavailable");
        } else {
            error_log("No loaders were found; perhaps your vcs cli tools are not installed, not in PATH, or otherwise unavailable");
        }
        exit(1);
    }

    $errors = array();
    foreach($loaders as $loader) {
        list($result, $err) = call_user_func_array($loader, array($fileish, $base_path, $default_fileish));
        if (empty($err)) {
            return $result;
        }
        $errors[] = "Failed to find '$fileish' with '$loader'; $err";
    }

    foreach($errors as $e) {
        error_log($e);
    }

    exit(1);
}

function loadFile($fileish, $base_path, $default_fileish) {
    if (empty($fileish)) {
        $fileish = $default_fileish;
        if (!empty($base_path)) {
            $fileish = joinPath($base_path, $fileish);
        }
    }

    // Does it look like a url that we can handle with stream wrappers?
    if (isUrl($fileish) && in_array(parse_url($fileish, PHP_URL_SCHEME), stream_get_wrappers())) {
        return array(mustDecodeJson(file_get_contents($fileish), $fileish), false);
    }

    // Is it a file in the local filesystem?
    if (file_exists($fileish)) {
        return array(mustDecodeJson(file_get_contents($fileish), $fileish), false);
    }

    return array(false, "Candidate '$fileish' does not look loadable from the fs or php stream wrappers");
}

function isUrl($string) {
    return filter_var($string, FILTER_VALIDATE_URL, FILTER_FLAG_PATH_REQUIRED);
}

function mustDecodeJson($json, $context) {
    $data = json_decode($json);

    if (empty($data)) {
        error_log("Error: contents from $context does not decode as json");
        exit(1);
    }

    return $data;
}

function makeCompareUrl($pkg, $diff) {
    $func = 'formatCompare' . ucfirst(getSourceRepoType((string) @$pkg->source->url));
    return call_user_func($func, @$pkg->source->url, $diff[$pkg->name][0], $diff[$pkg->name][1]);
}

function getSourceRepoType($url) {
    if (preg_match('/^git@bitbucket\..+:.+\.git$/', $url)) {
        return 'bitbucket';
    }
    if (preg_match('/^git@github\..+:.+\.git$/', $url)) {
        return 'github';
    }
    if (preg_match('/^git@gitlab\..+:.+\.git$/', $url)) {
        return 'gitlab';
    }
    if (preg_match('/^git@git\.drupal\..+:.+\.git$/', $url)) {
      return 'drupal';
    }

    if (! preg_match('/^http/i', $url)) {
        return 'unknown';
    }

    $host = strtolower(parse_url($url, PHP_URL_HOST));

    if (strpos($host, 'github') !== false) {
        return 'github';
    } elseif (strpos($host, 'bitbucket') !== false) {
        return 'bitbucket';
    } elseif (strpos($host, 'gitlab') !== false) {
        return 'gitlab';
    } elseif (strpos($host, 'drupalcode') !== false) {
      return 'drupal';
    }

    return 'unknown';
}

function formatCompareUnknown($url, $from, $to) {
    return '';
}

function formatCompareGithub($url, $from, $to) {
    if (strpos($url, 'http') === false) {
        $url = preg_replace('/^git@(github\.[^:]+):/', 'https://$1/', $url);
    }
    $url = preg_replace('/\.git$/', '', $url);
    return sprintf('%s/compare/%s...%s', $url, urlencode($from), urlencode($to));
}

function formatCompareBitbucket($url, $from, $to) {
    if (strpos($url, 'http') === false) {
        $url = preg_replace('/^git@(bitbucket\.[^:]+):/', 'https://$1/', $url);
    }
    $url = preg_replace('/\.git$/', '', $url);
    return sprintf('%s/branches/compare/%s%%0D%s', $url, urlencode($to), urlencode($from));
}

function formatCompareGitlab($url, $from, $to) {
    if (strpos($url, 'http') === false) {
        $url = preg_replace('/^git@(gitlab\.[^:]+):/', 'https://$1/', $url);
    }
    $url = preg_replace('/\.git$/', '', $url);
    return sprintf('%s/-/compare/%s...%s', $url, urlencode($from), urlencode($to));
}

function formatCompareDrupal($url, $from, $to) {
  // Drupalcode uses self-hosted Gitlab now
  return formatCompareGitlab($url, $from, $to);
}

//
// ## VCSes ####################
//

function getVcses() {
    return array('git', 'svn');
}

function vcsDetectGit($_fileish) {
    // Is there a git executable?
    exec('sh -c "git --version" > /dev/null 2>&1', $_out, $exit);
    if ($exit !== 0) return array(false, "'git --version' exited with non-zero code '$exit'");

    // Does this look like a git repo?
    $path = findUp('.', '.git');
    return array(!! $path, ($path) ? false : "Could not find .git in current directory or parents");
}

function vcsLoadGit($fileish, $base_path, $_default_fileish) {
    // We don't care about $default_fileish here - we are expected to load from
    // git and we must make a filename to do that.
    if (empty($fileish)) {
        $fileish = 'HEAD';
    }

    if (strpos($fileish, ':') === false) {
        $fileish .= ':' . $base_path . 'composer.lock';
    }

    $lines = array();
    exec('git show ' . escapeshellarg($fileish), $lines, $exit);

    if ($exit !== 0) {
        return array('', "'git show $fileish' exited with non-zero code '$exit'");
    }

    return array(mustDecodeJson(implode("\n", $lines), $fileish), false);
}

function vcsDetectSvn($fileish, $base_path, $default_fileish) {
    // Is there a git executable?
    exec('sh -c "svn --version" > /dev/null 2>&1', $_out, $exit);
    if ($exit !== 0) return array(false, "'svn --version' exited with non-zero code '$exit'");

    if (strpos($fileish, 'svn://') === 0) {
        return array(true, false);
    }

    // Does this look like a svn repo?
    $path = findUp('.', '.svn');
    return array(!! $path, ($path) ? false : "Could not find .svn in current directory or parents");
}

function vcsLoadSvn($fileish, $base_path, $_default_fileish) {
    // We don't care about $default_fileish here - we are expected to load from
    // svn and we must make a filename to do that.
    if (empty($fileish)) {
        $fileish = 'BASE';
    }

    // If $fileish starts with a url scheme that 'svn cat' can handle or ^, or
    // if it contains a @, assume it is already a proper svn identifier.
    // - file:// http:// https:// svn:// svn+ssh:// => absolute url of
    //   repository (file/http/https may have been handled with stream wrappers
    //   if '--vcs svn' wasn't specified)
    // - ^ => relative url from current workspace repository
    // - @ => repository url with revision
    if (preg_match('#^\^|^(file|http|https|svn|svn\+ssh)://|@#i', $fileish) === 0) {
        $fileish = $base_path . 'composer.lock@'.$fileish;
    }

    exec('svn cat ' . escapeshellarg($fileish), $lines, $exit);

    if ($exit !== 0) {
        return array('', "'svn cat $fileish' exited with non-zero code '$exit'");
    }

    return array(mustDecodeJson(implode("\n", $lines), $fileish), false);
}

function findUp($path, $filename, $tries = 10) {
    if (empty($path)) {
        $path = '.';
    }

    // > Trailing delimiters, such as \ and /, are also removed
    // > returns false on failure, e.g. if the file does not exist.
    $path = realpath($path);
    if ($path === false) return false;

    do {
        $candidate = joinPath($path, $filename);

        if (file_exists($candidate)) {
            return $candidate;
        }

        $path = dirnameSafe($path);
    } while ($path !== false && --$tries > 0);

    return false;
}

function dirnameSafe($path) {
    $parent = dirname($path);
    return ($parent != $path && !empty($parent)) ? $parent : false;
}

function joinPath(/* path parts */) {
    $args = func_get_args();
    $head = $args[0];
    $lead = '';

    if ($head[0] == DIRECTORY_SEPARATOR) {
      $lead = DIRECTORY_SEPARATOR;
    }

    return $lead . implode(DIRECTORY_SEPARATOR, array_map(function($part) {
        return trim($part, DIRECTORY_SEPARATOR);
    }, $args));
}

function ensureTrailingPathSep($path) {
  return trim($path, DIRECTORY_SEPARATOR) . DIRECTORY_SEPARATOR;
}

function parseOpts() {
    $given = getopt('hp:', array('path:', 'from:', 'to:', 'md', 'json', 'pretty', 'no-links', 'only-prod', 'only-dev', 'help', 'vcs:'));

    foreach(array('help' => 'h', 'path' => 'p') as $long => $short) {
        if (array_key_exists($short, $given)) {
            $given[$long] = $given[$short];
            unset($given[$short]);
        }
    }

    if (array_key_exists('help', $given)) {
        usage();
    }

    $vcs = array_key_exists('vcs', $given) ? $given['vcs'] : '';
    if ($vcs && !function_exists('vcsLoad' . ucfirst($vcs))) {
        error_log("Unsupported vcs '$vcs'\n");
        usage();
    }

    return array(
        'path' => array_key_exists('path', $given) ? ensureTrailingPathSep($given['path']) : '',
        'from' => array_key_exists('from', $given) ? $given['from'] : '',
        'to' => array_key_exists('to', $given) ? $given['to'] : '',
        'md' => array_key_exists('md', $given),
        'json' => array_key_exists('json', $given),
        'pretty' => version_compare(PHP_VERSION, '5.4.0', '>=') && array_key_exists('pretty', $given),
        'no-links' => array_key_exists('no-links', $given),
        'only-prod' => array_key_exists('only-prod', $given),
        'only-dev' => array_key_exists('only-dev', $given),
        'vcs' => $vcs,
    );
}

function usage() {
    $vcses = implode(', ', getVcses());
    print <<<EOF
Usage: composer-lock-diff [options]

Options:
  -h --help    Print this message
  --path, -p   Base to with which to prefix paths. Default "./"
               E.g. `-p app` would look for HEAD:app/composer.lock and app/composer.lock
  --from       The file, git ref, or git ref with filename to compare from
               (git: HEAD:composer.lock, svn: composer.lock@BASE)
  --to         The file, git ref, or git ref with filename to compare to (composer.lock)
  --json       Format output as JSON
  --pretty     Pretty print JSON output (PHP >= 5.4.0)
  --md         Use markdown instead of plain text
  --no-links   Don't include Compare links in plain text or any links in markdown
  --only-prod  Only include changes from `packages`
  --only-dev   Only include changes from `packages-dev`
  --vcs        Force vcs ($vcses). Default: attempt to auto-detect

EOF;

    exit(0);
}
# vim: ff=unix ts=4 ss=4 sr et

