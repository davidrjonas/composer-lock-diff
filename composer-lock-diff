#!/usr/bin/env php
<?php

$prod = diff('packages');
$dev = diff('packages-dev');

if (hasOpt('json')) {
    $opts = (hasOpt('pretty')) ? JSON_PRETTY_PRINT : 0;
    print json_encode(array('changes' => $prod, 'changes-dev' => $dev), $opts);
    return;
}

print tableize('Production Changes', $prod);
print tableize('Dev Changes', $dev);

function diff($key) {
    global $argv;

    $pkgs = array();

    $ref = array_reduce($argv, function ($carry, $item) {
        return preg_match('/^[a-f0-9]+$/', $item) ? $item : $carry;
    }, 'HEAD');

    $lines = '';
    exec("git show $ref:composer.lock", $lines);
    $data = json_decode(implode("\n", $lines));

    foreach($data->$key as $pkg) {
        $pkgs[$pkg->name] = array(version($pkg), 'REMOVED');
    }

    $data = json_decode(file_get_contents('composer.lock'));

    foreach($data->$key as $pkg) {
        if (! array_key_exists($pkg->name, $pkgs)) {
            $pkgs[$pkg->name] = array('NEW', version($pkg));
            continue;
        }

        if ($pkgs[$pkg->name][0] == version($pkg)) {
            unset($pkgs[$pkg->name]);
        } else {
            $pkgs[$pkg->name][1] = version($pkg);
        }
    }

    return $pkgs;
}

function version($pkg)
{
    $version = null;
    if(substr($pkg->version,0,4) == 'dev-')
    {
        $version = substr($pkg->source->reference,0,7);
    }
    else
    {
        $version = $pkg->version;
    }
    return $version;
}

function hasOpt($opt) {
    global $argv;
    $prefix = strlen($opt) === 1 ? '-' : '--';
    return in_array($prefix.$opt, $argv);
}

function tableize($header, $data) {
    if (empty($data)) return '';

    $widths = array(maxLength(array_merge(array($header), array_keys($data))));

    for($i = 0; $i < count(reset($data)); $i++) {
        $widths[] = maxLength(array_map(function($k) use ($data, $i) { return $data[$k][$i]; }, array_keys($data)));
    }

    $total_width = array_sum($widths) + (count($widths) * 3) + 1;

    $lines[] = '+' . str_repeat('-', $total_width - 2) . '+';
    $lines[] = tabelizeLine(array($header, 'From', 'To'), $widths);
    $lines[] = '+' . str_repeat('-', $total_width - 2) . '+';

    foreach($data as $key => $v) {
        $lines[] = tabelizeLine(array_merge(array($key), $v), $widths);
    }

    $lines[] = '+' . str_repeat('-', $total_width - 2) . '+';

    return implode(PHP_EOL, $lines) . PHP_EOL;
}

function maxLength(array $array) {
    return max(array_map('strlen', $array));
}

function tabelizeLine($data, $widths) {
    $fields = array();
    $count = max(array(count($data), count($widths)));
    for($i = 0; $i < $count; $i++) {
        $value = ($i >= count($data)) ? '' : $data[$i];
        $width = ($i >= count($widths)) ? strlen($value) : $widths[$i];
        $fields[] = sprintf("%-{$width}s", $value);
    }
    return '| ' . implode(' | ', $fields) . ' |';
}
